plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'idea'
    id 'eclipse'
    id "org.openapi.generator" version "5.0.1"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    jackson_version = "2.12.3"
    isReleaseVersion = !version.endsWith('SNAPSHOT')
}

configurations {
    codeGenerator
}

dependencies {
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    codeGenerator project(':generator')
    testImplementation 'junit:junit:4.13'
}

def gitBranchName() {
    def branch = "unknown_branch"
    def proc = "git rev-parse HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

task generateCode(type: JavaExec) {
    description 'generate java code from spec. Use -PgenerateFromLocal to generate from the local file instead of the published version'
    classpath configurations.codeGenerator
    main = 'io.openlineage.client.Generator'
    if (project.hasProperty('generateFromLocal')) { 
      args
    } else { 
      args "https://raw.githubusercontent.com/OpenLineage/OpenLineage/" + gitBranchName()  + "/spec/OpenLineage.json"
    }
}

openApiGenerate {
// openapi-generator generate -i spec/OpenLineage.yml -g html2 -o ../OpenLineage.github.io/
    generatorName = "html2"
    inputSpec = "$rootDir/../../spec/OpenLineage.yml".toString()
    outputDir = "$buildDir/docs".toString()
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

compileJava.dependsOn tasks.generateCode, tasks.openApiGenerate

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.openlineage'
            artifactId = 'openlineage-java'

            from components.java

            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'marquez-java'
                description = 'Java client for Marquez'
                url = 'https://github.com/MarquezProject/marquez'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'marquezproject'
                        name = 'Marquez Project'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/MarquezProject/marquez.git'
                    developerConnection = 'scm:git:ssh://github.com:MarquezProject/marquez.git'
                    url = 'https://github.com/MarquezProject/marquez'
                }
            }
        }
    }

    repositories {
        maven {
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username = System.getenv('SONATYPE_USER')
                password = System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}

signing {
    required { isReleaseVersion }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

jar {
    manifest {
        attributes(
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version'),
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}
